{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport 'firebase/firestore';\nimport * as authActions from '../auth/auth.actions';\nimport * as ingresoEgresoActions from '../ingreso-egreso/ingreso-egreso.actions';\nimport { map } from 'rxjs/operators';\nimport { Usuario } from '../models/usuario.model';\nlet AuthService = class AuthService {\n  get user() {\n    return this._user;\n  }\n  constructor(auth, firestore, store) {\n    this.auth = auth;\n    this.firestore = firestore;\n    this.store = store;\n  }\n  initAuthListener() {\n    this.auth.authState.subscribe(fuser => {\n      if (fuser) {\n        // existe\n        this.userSubscription = this.firestore.doc(`${fuser.uid}/usuario`).valueChanges().subscribe(firestoreUser => {\n          const user = Usuario.fromFirebase(firestoreUser);\n          this._user = user;\n          this.store.dispatch(authActions.setUser({\n            user\n          }));\n        });\n      } else {\n        // no existe\n        this._user = null;\n        this.userSubscription?.unsubscribe();\n        this.store.dispatch(authActions.unSetUser());\n        this.store.dispatch(ingresoEgresoActions.unSetItems());\n      }\n    });\n  }\n  crearUsuario(nombre, email, password) {\n    // console.log({ nombre, email, password });\n    return this.auth.createUserWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      const newUser = new Usuario(user.uid, nombre, user.email);\n      return this.firestore.doc(`${user.uid}/usuario`).set({\n        ...newUser\n      });\n    });\n  }\n  loginUsuario(email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password);\n  }\n  logout() {\n    return this.auth.signOut();\n  }\n  isAuth() {\n    return this.auth.authState.pipe(map(fbUser => fbUser != null));\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}