{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, collectionCountSnap as collectionCountSnap$1, collectionCount as collectionCount$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, aggregateFieldEqual as aggregateFieldEqual$1, aggregateQuerySnapshotEqual as aggregateQuerySnapshotEqual$1, and as and$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, average as average$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, count as count$1, deleteAllPersistentCacheIndexes as deleteAllPersistentCacheIndexes$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, disablePersistentCacheIndexAutoCreation as disablePersistentCacheIndexAutoCreation$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, enablePersistentCacheIndexAutoCreation as enablePersistentCacheIndexAutoCreation$1, endAt as endAt$1, endBefore as endBefore$1, getAggregateFromServer as getAggregateFromServer$1, getCountFromServer as getCountFromServer$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, getPersistentCacheIndexManager as getPersistentCacheIndexManager$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, memoryEagerGarbageCollector as memoryEagerGarbageCollector$1, memoryLocalCache as memoryLocalCache$1, memoryLruGarbageCollector as memoryLruGarbageCollector$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, or as or$1, orderBy as orderBy$1, persistentLocalCache as persistentLocalCache$1, persistentMultipleTabManager as persistentMultipleTabManager$1, persistentSingleTabManager as persistentSingleTabManager$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setIndexConfiguration as setIndexConfiguration$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, sum as sum$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\nclass Firestore {\n  constructor(firestore) {\n    return firestore;\n  }\n}\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\nclass FirestoreInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n  }\n}\nconst firestoreInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(FIRESTORE_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_FIRESTORE_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.firestore-instances');\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n  const defaultFirestore = ɵgetDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);\n  return defaultFirestore && new Firestore(defaultFirestore);\n}\nfunction firestoreInstanceFactory(fn) {\n  return (zone, injector) => {\n    const firestore = zone.runOutsideAngular(() => fn(injector));\n    return new Firestore(firestore);\n  };\n}\nconst FIRESTORE_INSTANCES_PROVIDER = {\n  provide: FirestoreInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FIRESTORE_INSTANCES]]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n  provide: Firestore,\n  useFactory: defaultFirestoreInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FIRESTORE_INSTANCES], FirebaseApp]\n};\nlet FirestoreModule = /*#__PURE__*/(() => {\n  class FirestoreModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'fst');\n    }\n    static ɵfac = function FirestoreModule_Factory(t) {\n      return new (t || FirestoreModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: FirestoreModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n    });\n  }\n  return FirestoreModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideFirestore(fn, ...deps) {\n  return {\n    ngModule: FirestoreModule,\n    providers: [{\n      provide: PROVIDED_FIRESTORE_INSTANCES,\n      useFactory: firestoreInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Firestore+Auth work better if Auth is loaded first\n      [new Optional(), AuthInstances], [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst collectionChanges = /*#__PURE__*/ɵzoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = /*#__PURE__*/ɵzoneWrap(collection$1, true);\nconst sortedChanges = /*#__PURE__*/ɵzoneWrap(sortedChanges$1, true);\nconst auditTrail = /*#__PURE__*/ɵzoneWrap(auditTrail$1, true);\nconst collectionData = /*#__PURE__*/ɵzoneWrap(collectionData$1, true);\nconst collectionCountSnap = /*#__PURE__*/ɵzoneWrap(collectionCountSnap$1, true);\nconst collectionCount = /*#__PURE__*/ɵzoneWrap(collectionCount$1, true);\nconst docSnapshots = /*#__PURE__*/ɵzoneWrap(doc$1, true);\nconst docData = /*#__PURE__*/ɵzoneWrap(docData$1, true);\nconst snapToData = /*#__PURE__*/ɵzoneWrap(snapToData$1, true);\nconst fromRef = /*#__PURE__*/ɵzoneWrap(fromRef$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst addDoc = /*#__PURE__*/ɵzoneWrap(addDoc$1, true);\nconst aggregateFieldEqual = /*#__PURE__*/ɵzoneWrap(aggregateFieldEqual$1, true);\nconst aggregateQuerySnapshotEqual = /*#__PURE__*/ɵzoneWrap(aggregateQuerySnapshotEqual$1, true);\nconst and = /*#__PURE__*/ɵzoneWrap(and$1, true);\nconst arrayRemove = /*#__PURE__*/ɵzoneWrap(arrayRemove$1, true);\nconst arrayUnion = /*#__PURE__*/ɵzoneWrap(arrayUnion$1, true);\nconst average = /*#__PURE__*/ɵzoneWrap(average$1, true);\nconst clearIndexedDbPersistence = /*#__PURE__*/ɵzoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = /*#__PURE__*/ɵzoneWrap(collection$2, true);\nconst collectionGroup = /*#__PURE__*/ɵzoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = /*#__PURE__*/ɵzoneWrap(connectFirestoreEmulator$1, true);\nconst count = /*#__PURE__*/ɵzoneWrap(count$1, true);\nconst deleteAllPersistentCacheIndexes = /*#__PURE__*/ɵzoneWrap(deleteAllPersistentCacheIndexes$1, true);\nconst deleteDoc = /*#__PURE__*/ɵzoneWrap(deleteDoc$1, true);\nconst deleteField = /*#__PURE__*/ɵzoneWrap(deleteField$1, true);\nconst disableNetwork = /*#__PURE__*/ɵzoneWrap(disableNetwork$1, true);\nconst disablePersistentCacheIndexAutoCreation = /*#__PURE__*/ɵzoneWrap(disablePersistentCacheIndexAutoCreation$1, true);\nconst doc = /*#__PURE__*/ɵzoneWrap(doc$2, true);\nconst documentId = /*#__PURE__*/ɵzoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = /*#__PURE__*/ɵzoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = /*#__PURE__*/ɵzoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = /*#__PURE__*/ɵzoneWrap(enableNetwork$1, true);\nconst enablePersistentCacheIndexAutoCreation = /*#__PURE__*/ɵzoneWrap(enablePersistentCacheIndexAutoCreation$1, true);\nconst endAt = /*#__PURE__*/ɵzoneWrap(endAt$1, true);\nconst endBefore = /*#__PURE__*/ɵzoneWrap(endBefore$1, true);\nconst getAggregateFromServer = /*#__PURE__*/ɵzoneWrap(getAggregateFromServer$1, true);\nconst getCountFromServer = /*#__PURE__*/ɵzoneWrap(getCountFromServer$1, true);\nconst getDoc = /*#__PURE__*/ɵzoneWrap(getDoc$1, true);\nconst getDocFromCache = /*#__PURE__*/ɵzoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = /*#__PURE__*/ɵzoneWrap(getDocFromServer$1, true);\nconst getDocs = /*#__PURE__*/ɵzoneWrap(getDocs$1, true);\nconst getDocsFromCache = /*#__PURE__*/ɵzoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = /*#__PURE__*/ɵzoneWrap(getDocsFromServer$1, true);\nconst getFirestore = /*#__PURE__*/ɵzoneWrap(getFirestore$1, true);\nconst getPersistentCacheIndexManager = /*#__PURE__*/ɵzoneWrap(getPersistentCacheIndexManager$1, true);\nconst increment = /*#__PURE__*/ɵzoneWrap(increment$1, true);\nconst initializeFirestore = /*#__PURE__*/ɵzoneWrap(initializeFirestore$1, true);\nconst limit = /*#__PURE__*/ɵzoneWrap(limit$1, true);\nconst limitToLast = /*#__PURE__*/ɵzoneWrap(limitToLast$1, true);\nconst loadBundle = /*#__PURE__*/ɵzoneWrap(loadBundle$1, true);\nconst memoryEagerGarbageCollector = /*#__PURE__*/ɵzoneWrap(memoryEagerGarbageCollector$1, true);\nconst memoryLocalCache = /*#__PURE__*/ɵzoneWrap(memoryLocalCache$1, true);\nconst memoryLruGarbageCollector = /*#__PURE__*/ɵzoneWrap(memoryLruGarbageCollector$1, true);\nconst namedQuery = /*#__PURE__*/ɵzoneWrap(namedQuery$1, true);\nconst onSnapshot = /*#__PURE__*/ɵzoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = /*#__PURE__*/ɵzoneWrap(onSnapshotsInSync$1, true);\nconst or = /*#__PURE__*/ɵzoneWrap(or$1, true);\nconst orderBy = /*#__PURE__*/ɵzoneWrap(orderBy$1, true);\nconst persistentLocalCache = /*#__PURE__*/ɵzoneWrap(persistentLocalCache$1, true);\nconst persistentMultipleTabManager = /*#__PURE__*/ɵzoneWrap(persistentMultipleTabManager$1, true);\nconst persistentSingleTabManager = /*#__PURE__*/ɵzoneWrap(persistentSingleTabManager$1, true);\nconst query = /*#__PURE__*/ɵzoneWrap(query$1, true);\nconst queryEqual = /*#__PURE__*/ɵzoneWrap(queryEqual$1, true);\nconst refEqual = /*#__PURE__*/ɵzoneWrap(refEqual$1, true);\nconst runTransaction = /*#__PURE__*/ɵzoneWrap(runTransaction$1, true);\nconst serverTimestamp = /*#__PURE__*/ɵzoneWrap(serverTimestamp$1, true);\nconst setDoc = /*#__PURE__*/ɵzoneWrap(setDoc$1, true);\nconst setIndexConfiguration = /*#__PURE__*/ɵzoneWrap(setIndexConfiguration$1, true);\nconst setLogLevel = /*#__PURE__*/ɵzoneWrap(setLogLevel$1, true);\nconst snapshotEqual = /*#__PURE__*/ɵzoneWrap(snapshotEqual$1, true);\nconst startAfter = /*#__PURE__*/ɵzoneWrap(startAfter$1, true);\nconst startAt = /*#__PURE__*/ɵzoneWrap(startAt$1, true);\nconst sum = /*#__PURE__*/ɵzoneWrap(sum$1, true);\nconst terminate = /*#__PURE__*/ɵzoneWrap(terminate$1, true);\nconst updateDoc = /*#__PURE__*/ɵzoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = /*#__PURE__*/ɵzoneWrap(waitForPendingWrites$1, true);\nconst where = /*#__PURE__*/ɵzoneWrap(where$1, true);\nconst writeBatch = /*#__PURE__*/ɵzoneWrap(writeBatch$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, auditTrail, average, clearIndexedDbPersistence, collection, collectionChanges, collectionCount, collectionCountSnap, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, firestoreInstance$, fromRef, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, sum, terminate, updateDoc, waitForPendingWrites, where, writeBatch };\n//# sourceMappingURL=angular-fire-firestore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}